@trait
class Value:
    """A value in a JSON document.

    """

    def set_object(self, items: {string: Value}):
        raise Error()

    def get_object(self) -> {string: Value}:
        raise Error()

    def []=(self, key: string, value: Value):
        raise Error()

    def [](self, key: string) -> Value:
        raise Error()

    def set_list(self, items: [Value]):
        raise Error()

    def get_list(self) -> [Value]:
        raise Error()

    def []=(self, index: i64, value: Value):
        raise Error()

    def [](self, index: i64) -> Value:
        raise Error()

    def set_string(self, value: string):
        raise Error()

    def get_string(self) -> string:
        raise Error()

    def set_integer(self, value: i64):
        raise Error()

    def get_integer(self) -> i64:
        raise Error()

    def set_float(self, value: f64):
        raise Error()

    def get_float(self) -> f64:
        raise Error()

    def set_bool(self, value: bool):
        raise Error()

    def get_bool(self) -> bool:
        raise Error()

    def get_null(self):
        raise Error()

class Object(Value):

    items: {string: Value}

    def set_object(self, items: {string: Value}):
        self.items = items

    def get_object(self) -> {string: Value}:
        return self.items

    def []=(self, key: string, value: Value):
        return self.items[key]

    def [](self, key: string) -> Value:
        return self.items[key]

class List(Value):

    items: [Value]

    def set_list(self, items: [Value]):
        self.items = items

    def get_list(self) -> [Value]:
        return self.items

    def []=(self, index: i64, value: Value):
        return self.items[index] = value

    def [](self, index: i64) -> Value:
        return self.items[index]

class String(Value):

    value: string

    def set_string(self, value: string):
        self.value = value

    def get_string(self) -> string:
        return self.value

class Integer(Value):

    value: i64

    def set_integer(self, value: i64):
        self.value = value

    def get_integer(self) -> i64:
        return self.value

class Float(Value):

    value: f64

    def set_float(self, value: f64):
        self.value = value

    def get_float(self) -> f64:
        return self.value

class Bool(Value):

    value: bool

    def set_bool(self, value: bool):
        self.value = value

    def get_bool(self) -> bool:
        return self.value

class Null(Value):

    def get_null(self):
        pass

def _encode(value: Object) -> string:
    items = []

    for key, value in self.items:
        items += f"{_encode(key)}: {_encode(item)}"

    encoded = "{"
    encoded += string.join(items, ", ")
    encoded += "}"

    return encoded

def _encode(value: List) -> string:
    items = []

    for item in self.items:
        items += _encode(item)

    encoded = "["
    encoded += string.join(items, ", ")
    encoded += "]"

    return encoded

def _encode(value: String) -> string:
    return f"\"{value}\""

def _encode(value: Integer) -> string:
    return str(value.value)

def _encode(value: Float) -> string:
    return str(value.value)

def _encode(value: Bool) -> string:
    if value.value:
        return "true"
    else:
        return "false"

def _encode(value: Null) -> string:
    return "null"

def encode(value: Value) -> string:
    """Encode into a string.

    """

    return _encode(value)

@trait
class StackValue:

    def handle_value(self, value: Value):
        pass

    def handle_comma(self):
        self.expecting_another_item = True

    def handle_colon(self):
        raise Error()

    def finalize(self, ch: char):
        pass

class StackObject(StackValue):

    value: Object
    key: String
    expecting_another_item: bool

    def handle_value(self, value: Value):
        if self.key is None:
            self._handle_key(value)
        else:
            self.value.items[self.key] = value
            self.key = None
            self.expecting_another_item = False

    def _handle_key(self, value: String):
        self.key = value

    def handle_colon(self):
        if self.key is None:
            raise Error()

    def finalize(self, ch: char):
        if self.key is not None:
            raise Error()

        if self.expecting_another_item:
            raise Error()

        if ch != '}':
            raise Error()

class StackList(StackValue):

    value: List
    expecting_another_item: bool

    def handle_value(self, value: Value):
        self.value.items += value
        self.expecting_another_item = False

    def finalize(self, ch: char):
        if self.expecting_another_item:
            raise Error()

        if ch != ']':
            raise Error()

def _decode_string(reader: StringReader) -> String:
    value = ""

    while True:
        ch = reader.get()

        if ch == '\"':
            break
        elif ch == '\\':
            ch = reader.get()

            if ch in "\"/\\bfrnt":
                value += ch
            elif ch == 'u':
                value += char(i32(reader.read_exactly(4), 16))
            else:
                raise Error()
        elif ch == '':
            raise Error()
        else:
            value += ch

    return String(value)

def _decode_number(reader: StringReader, ch: char) -> Value:
    return Integer(-1)

def _decode_true(reader: StringReader) -> Bool:
    if reader.read(3) != "rue":
        raise Error()

    return Bool(True)

def _decode_false(reader: StringReader) -> Bool:
    if reader.read(4) != "alse":
        raise Error()

    return Bool(False)

def _decode_null(reader: StringReader) -> Null:
    if reader.read(3) != "ull":
        raise Error()

    return Null()

def decode(data: string) -> Value:
    """Decode from string.

    """

    reader = StringReader(data)
    root = None
    stack = []

    while True:
        ch = reader.get()

        if ch == '{':
            value = Object()
            stack += StackObject(value)
        elif ch == '[':
            value = List()
            stack += StackList(value)
        elif ch in "}]":
            stack.pop().finalize(ch)
            continue
        elif ch in "\t\r\n ":
            continue
        elif ch == ':':
            stack[-1].handle_colon()
            continue
        elif ch == ',':
            stack[-1].handle_comma()
            continue
        elif ch == '\"':
            value = _decode_string(reader)
        elif ch in "-0123456789":
            value = _decode_number(reader, ch)
        elif ch == 't':
            value = _decode_true(reader)
        elif ch == 'f':
            value = _decode_false(reader)
        elif ch == 'n':
            value = _decode_null(reader)
        elif ch == '':
            break
        else:
            raise Error()

        if root is None:
            root = value
        elif stack.length() > 0:
            stack[-1].handle_value(value)
        else:
            raise Error()

    if stack.length() != 0:
        raise Error()
    elif root is None:
        raise Error()

    return root

@test
def test_single_value():
    datas = [
        "{}",
        "[]",
        "\"hi\""
        "1",
        "2.0",
        "true",
        "false",
        "null"
    ]

    encoded = "{}"
    decoded = decode(encoded)
    assert_eq(decoded.get_object(), {})
    assert_eq(encode(decoded), encoded)

    encoded = "[]"
    decoded = decode(encoded)
    assert_eq(decoded.get_list(), [])
    assert_eq(encode(decoded), encoded)

    encoded = "\"hi\""
    decoded = decode(encoded)
    assert_eq(decoded.get_string(), "hi")
    assert_eq(encode(decoded), encoded)

    encoded = "1"
    decoded = decode(encoded)
    assert_eq(decoded.get_integer(), 1)
    assert_eq(encode(decoded), encoded)

    encoded = "2.0"
    decoded = decode(encoded)
    assert_eq(decoded.get_float(), 2.0)
    assert_eq(encode(decoded), encoded)

    encoded = "false"
    decoded = decode(encoded)
    assert_false(decoded.get_bool())
    assert_eq(encode(decoded), encoded)

    encoded = "null"
    decoded = decode(encoded)
    decoded.get_null()
    assert_eq(encode(decoded), encoded)

@test
def test_nested_objects_and_lists():
    encoded = "{\"a\": [true, [4, 2, 3], {\"f\": {\"b\": 1, \"c\": null}}, 55]}"
    decoded = decode(encoded)
    assert_true(decoded["a"][0].get_bool())
    assert_eq(decoded["a"][1][0].get_integer(), 4)
    assert_eq(decoded["a"][1][1].get_integer(), 2)
    assert_eq(decoded["a"][1][2].get_integer(), 3)
    assert_eq(decoded["a"][2]["f"]["b"].get_integer(), 1)
    decoded["a"][2]["f"]["c"].get_null()
    assert_eq(decoded["a"][3].get_integer(), 55)

@test
def test_build_json_document():
    decoded = Object({
        "a": List([
            Bool(True),
            List([
                Integer(4),
                Integer(2),
                Integer(3)
            ]),
            Object({
                "f": Object({
                    "b": Integer(1),
                    "c": Null()
                })
            }),
            Integer(55)
        ])
    })
    decoded = decode(encode(decoded))
    assert_true(decoded["a"][0].get_bool())
    assert_eq(decoded["a"][1][0].get_integer(), 4)
    assert_eq(decoded["a"][1][1].get_integer(), 2)
    assert_eq(decoded["a"][1][2].get_integer(), 3)
    assert_eq(decoded["a"][2]["f"]["b"].get_integer(), 1)
    decoded["a"][2]["f"]["c"].get_null()
    assert_eq(decoded["a"][3].get_integer(), 55)
