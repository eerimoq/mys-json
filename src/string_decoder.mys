class JsonError(Error):
    message: string

class StringDecoder:
    _data: string
    _pos: u64

    def __init__(self, data: string):
        self._data = data
        self._pos = 0

    def object_available(self) -> bool:
        self._skip_space()

        return self._get() in "{,"

    def object_key(self) -> string:
        self._skip_space()
        key = self.string()

        if self._get() != ':':
            raise JsonError("Object value not found.")

        return key

    def array_available(self) -> bool:
        self._skip_space()

        return self._get() in "[,"

    def skip(self):
        pass

    def string(self) -> string:
        self._skip_space()

        if self._get() != '"':
            raise JsonError("String not found.")

        begin = self._pos

        while True:
            ch = self._get()

            match ch:
                case '\"':
                    break
                case '\\':
                    self._pos += 1

        return self._data[begin:self._pos - 1]

    def primitive(self) -> string:
        self._skip_space()
        begin = self._pos

        while True:
            ch = self._get()

            if ch == '':
                break
            elif ch not in "-0123456789.falsetrun":
                self._pos -= 1
                break

        return self._data[begin:self._pos]

    def _get(self) -> char:
        if self._pos == len(self._data):
            return ''

        ch = self._data[self._pos]
        self._pos += 1

        return ch

    def _skip_space(self):
        while self._data[self._pos].is_space():
            self._pos += 1

@test
def test_coordinates():
    decoder = StringDecoder("""
    {
        "coordinates":[
            {"x": 2.0, "y": 0.5, "z": 0.25},
            {"y": 0.5, "x": 2.0, "z": 0.25}
        ]
    }
    """)
    x = 0.0
    y = 0.0
    z = 0.0

    while decoder.object_available():
        if decoder.object_key() == "coordinates":
            while decoder.array_available():
                while decoder.object_available():
                    match decoder.object_key():
                        case "x":
                            x += f64(decoder.primitive())
                        case "y":
                            y += f64(decoder.primitive())
                        case "z":
                            z += f64(decoder.primitive())
                        case _:
                            decoder.skip()
        else:
            decoder.skip()

    assert x == 4.0
    assert y == 1.0
    assert z == 0.5
