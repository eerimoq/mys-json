class JsonError(Error):
    message: string

class StringDecoder:
    _data: string
    _pos: u64

    def __init__(self, data: string):
        self._data = data
        self._pos = 0

    def object_begin(self):
        self._skip_whitespaces()

        if self._data[self._pos] != '{':
            raise JsonError("Object begin not found.")

    def object_end(self):
        self._skip_whitespaces()

        if self._get() != '}':
            raise JsonError("Object end not found.")

    def get_object_key(self) -> string:
        self._skip_whitespaces()
        ch = self._get()

        if ch in "{,":
            pass
        elif ch == '}':
            self._pos -= 1

            return None
        else:
            raise JsonError(f"expected '{{', ',' or '}}', but got '{ch}'")

        key = self.get_string()

        if self._get() != ':':
            raise JsonError("Object value not found.")

        return key

    def list_begin(self):
        self._skip_whitespaces()

        if self._data[self._pos] != '[':
            raise JsonError("List begin not found.")

    def list_end(self):
        self._skip_whitespaces()

        if self._get() != ']':
            raise JsonError("List end not found.")

    def list_available(self) -> bool:
        self._skip_whitespaces()

        if self._data[self._pos] not in "[,":
            return False

        self._pos += 1

        return True

    def get_string(self) -> string:
        self._skip_whitespaces()

        if self._get() != '"':
            raise JsonError("String not found.")

        begin = self._pos

        while True:
            ch = self._get()

            match ch:
                case '\"':
                    break
                case '\\':
                    self._pos += 1

        return self._data[begin:self._pos - 1]

    def get_primitive(self) -> string:
        self._skip_whitespaces()
        begin = self._pos

        while True:
            ch = self._get()

            if ch == '':
                break
            elif ch not in "-0123456789.falsetrun":
                self._pos -= 1
                break

        return self._data[begin:self._pos]

    def _get(self) -> char:
        if self._pos == len(self._data):
            return ''

        ch = self._data[self._pos]
        print(ch)
        self._pos += 1

        return ch

    def _skip_whitespaces(self):
        while str(self._data[self._pos]).is_space():
            self._pos += 1

    def _raise_if_not_leading_character(self, expected: char):
        self._skip_whitespaces()

        if self._get() != expected:
            raise JsonError(
                f"expected '{expected}', but got '{self._data[self._pos]}'")

@test
def test_primitive():
    datas = [
        "true",
        "false",
        "null",
        "1",
        "-1",
        "2.3"
    ]

    for data in datas:
        decoder = StringDecoder(data)
        assert decoder.get_primitive() == data

class _Foo:
    a: string
    b: [i64]

    def __init__(self):
        self.a = None
        self.b = []

@test
def test_to_class():
    decoder = StringDecoder("{\"a\": \"hi\", \"b\": [1, -3]}")
    foo = _Foo()

    decoder.object_begin()

    while True:
        match decoder.get_object_key():
            case "a":
                foo.a = decoder.get_string()
            case "b":
                decoder.list_begin()

                while decoder.list_available():
                    foo.b += i64(decoder.get_primitive())

                decoder.list_end()
            case None:
                break

    decoder.object_end()

    assert foo.a == "hi"
    assert foo.b == [1, -3]

@test
def test_nested():
    decoder = StringDecoder("{\"a\": [[1], [3, 4]]}")

    decoder.object_begin()
    assert decoder.get_object_key() == "a"

    decoder.list_begin()
    decoder.list_available()

    decoder.list_begin()
    decoder.list_available()
    assert decoder.get_primitive() == "1"
    decoder.list_available()
    decoder.list_end()

    decoder.list_available()

    decoder.list_begin()
    decoder.list_available()
    assert decoder.get_primitive() == "3"
    decoder.list_available()
    assert decoder.get_primitive() == "4"
    decoder.list_available()
    decoder.list_end()

    decoder.list_available()
    decoder.list_end()

    decoder.object_end()
